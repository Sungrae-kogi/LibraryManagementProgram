세션은 한 브라우저에 하나씩 생성되어서 서버단에 저장된다. 
즉, 이용자 10000명이 서버에 접속하여 인증하고 사용한다면 서버에는 10000개의 세션이 생성되고 저장되는데 이 세션에
검색 결과같이 데이터가 클 수 있는 정보를 저장하면 서버의 메모리 부족문제가 발생하여 성능저하가 발생할 수 있다.
따라서 세션에는 검색결과와 같이 무겁거나 큰 데이터의 저장보다는 사용자 인증정보, 검색 정보와 같은 작은 데이터들을 저장하여 상태정보 유지에 사용하는것이 효율적이다.

데이터 크기가 큰 경우는 HttpServletRequest 객체를 이용하여 저장하는 편이 좋다,
HttpServletRequest는 사용자로부터 HTTP 요청이 들어오면 서블릿 컨테이너에 의해 생성되고 사용자의 브라우저로 응답을 전송하는 순간
자동으로 삭제가 되는 일회성 객체이다. 따라서 큰 데이터의 저장 및 전달에 사용한다면 메모리 효율성을 높일 수 있다.

자주 사용하는 방식으로는 forward로 화면을 이동할 때 인데, 호출되는 forward(request,response) 메소드가 HttpServletRequest 객체를 매개변수로 전달받기 때문
하지만 HttpServletRequest에 데이터를 등록하고 Redirect를 한다면 리디렉트된 서블릿에서는 HttpServletRequest로부터 데이터를 추출할 수 없다.
Redirect는 응답을 브라우저에 전송하고, 브라우저에서 전송받은 응답의 URL로 다시 요청을 보내는 방식이기 때문에 새로운 HttpServletRequest 객체가 생성되는것이다.

만약 Redirect 관계에 있는 서블릿 간에 정보를 공유하려면 HttpServletRequest 가 아닌 HttpSession을 이용하여 데이터를 공유해야한다.

*HttpServletRequest 동작방식
사용자 요청 -> 서블릿 컨테이너가 HttpServletRequest 객체 생성 -> 사용자의 입력정보를 HttpServletRequest 객체에 설정 -> doPost(), doGet()등 메소드 호출시 인자로 전달.


세션에 등록한 정보는 세션의 유효시간동안 사용이 가능하고 로그아웃한다던지 브라우저가 종료되어 세션 객체가 삭제되면 더 이상 공유가 불가능하다.
따라서 어떤 정보는 특정 브라우저가 종료되더라도 사용이 가능하도록 유지할 필요가 있는데 이때 사용하는 객체가 ServletContext이다.
ServletContext는 Servlet Container가 구동되는 순간 생성되며 종료될때 삭제되는데 보통 서버에 등록된 웹 애플리케이션 하나당 하나의 ServletContext 객체가 매핑되므로
Servlet Container가 살아있는 동안에는 컨테이너 내의 모든 객체 사이에 정보공유가 가능하다는 특징이 존재한다.
web.xml 파일에서 <context-param> 이 그 예시, 미리 초기화 매개변수를 설정해두고 애플리케이션 내의 어떤 서블릿과 jsp에서든지 접근하여 사용가능하도록 (주로, DB연결설정, 파일경로, 환경설정 등)

이로인해 ServletContext에 공유 데이터를 저장하면 forward와 Redirect 방식 모두 가능하다.


1.Session객체 저장 -> forward, Redirect 가능 but, data 크기가 커질 시 서버 메모리에 부담 (세션 만료기간 같은 라이프사이클때문)
2.HttpServeltRequest객체 저장 -> forward 가능, Redirect시 유실, 사용자의 브라우저로 응답을 전송하기 전까지 존재하며 사용자가 다시 요청시에는 새로운 객체를 생성한다.
3.ServletContext객체 저장 -> forward, Redirect 가능, Servlet Container와 라이프사이클을 공유하며 웹 컨테이너가 살아있는 동안 컨테이너 내의 모든 객체 사이에 정보공유가 가능. Session과의 차이는 브라우저가 종료되더라도 서버가 살아있다면 정보는 유지된다는점.